{%- from "nslcd/map.jinja" import nslcd with context -%}
{%- set config = salt['pillar.get']('nslcd:config', {}) -%}
{%- set processed_parameters = [] -%}

{%- macro set_parameter(parameter, default=None) -%}
{%- set value = config.get(parameter, default) %}
{%- if value is not none %}
{%-   if value is number or value is string -%}
{{ parameter }} {{ value }}
{%-   elif value is iterable %}
{%-     for v in value %}
{{ parameter }} {{ v }}
{%-     endfor %}
{%-   endif %}
{%- do processed_parameters.append(parameter) %}
{%- endif %}
{%- endmacro -%}

# This file is managed by salt.
# Modify the salt pillar in the nslcd formula that generates this file instead.
#
# See nslcd.conf(5) for details.
#

uid {{ nslcd.nslcd_user }}
gid {{ nslcd.nslcd_group }}
{{ set_parameter('log') }}
{{ set_parameter('threads') }}

{{ set_parameter('nss_disable_enumeration') }}
{{ set_parameter('nss_getgrent_skipmembers') }}
{{ set_parameter('nss_gid_offset') }}
{{ set_parameter('nss_initgroups_ignoreusers') }}
{{ set_parameter('nss_min_uid') }}
{{ set_parameter('nss_nested_groups') }}
{{ set_parameter('nss_uid_offset') }}

{{ set_parameter('pam_authc_ppolicy') }}
{{ set_parameter('pam_authc_search') }}
{{ set_parameter('pam_authz_search') }}
{{ set_parameter('pam_password_prohibit_message') }}
{{ set_parameter('pam_password_prohibit_message') }}

{{ set_parameter('cache') }}
{{ set_parameter('ignorecase') }}
{{ set_parameter('reconnect_invalidate') }}
{{ set_parameter('validnames') }}

{{ set_parameter('uri', 'ldap://127.0.0.1/') }}
{{ set_parameter('ldap_version') }}
{{ set_parameter('pagesize') }}

{{ set_parameter('bind_timelimit') }}
{{ set_parameter('idle_timelimit') }}
{{ set_parameter('reconnect_retrytime') }}
{{ set_parameter('reconnect_sleeptime') }}
{{ set_parameter('timelimit') }}

{{ set_parameter('ssl') }}
{{ set_parameter('tls_cacertdir') }}
{{ set_parameter('tls_cacertfile') }}
{{ set_parameter('tls_cert') }}
{{ set_parameter('tls_ciphers') }}
{{ set_parameter('tls_key') }}
{{ set_parameter('tls_randfile') }}
{{ set_parameter('tls_reqcert') }}

{{ set_parameter('binddn') }}
{{ set_parameter('bindpw') }}
{{ set_parameter('rootpwmoddn') }}
{{ set_parameter('rootpwmodpw') }}

{%- set base = config.get('base', 'dc=example,dc=com') -%}
{%- if base is mapping %}
{%-   for map, dn in base.items() %}
base {{ map }} {{ dn }}
{%-   endfor %}
{%- else %}
base {{ base }}
{%- endif %}
{%- do processed_parameters.append('base') %}

{{ set_parameter('deref') }}
{{ set_parameter('referrals') }}

{%- set scope = config.get('scope', None) -%}
{%- if scope is not none %}
{%-   if scope is mapping %}
{%-     for map, dn in scope.items() %}
scope {{ map }} {{ dn }}
{%-     endfor %}
{%-   else %}
scope {{ scope }}
{%-   endif %}
{%- endif %}
{%- do processed_parameters.append('scope') %}

{%- set filters = config.get('filter', None) -%}
{%- if filters is not none %}
{%-   for map, value in filters.items() %}
filter {{ map }} {{ value }}
{%-   endfor %}
{%- endif %}
{%- do processed_parameters.append('filter') %}

{%- set maps = config.get('map', None) -%}
{%- if maps is not none %}
{%-   for map, attrs in maps.items() %}
{%-     for old, new in attrs.items() %}
map {{ map }} {{ old }} {{ new }}
{%-     endfor %}
{%-   endfor %}
{%- endif %}
{%- do processed_parameters.append('map') %}

{#- Accept arbitrary parameters #}
{%- for parameter in config %}
{%- if parameter not in processed_parameters %}
{{ set_parameter(parameter) }}
{%- endif %}
{%- endfor %}
